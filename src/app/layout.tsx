import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });


//-------------Metadata--------------------------------
// export const metadata: Metadata = {
//   title: "Arash Website",
//   description: "Generated by Arash Company",
// };

export const metadata: Metadata = {
  title: {
    absolute: "",
    default: "Arash Website",
    template: "%s | Arash"
  },
  description: "Generated by Arash Company",
};





//------------------------------------------------------
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <header>
          <p style={{ backgroundColor: "lightblue", padding: "5rem" }}>Header</p>
        </header>
        {children}
        <footer>
          <p style={{ backgroundColor: "pink", padding: "5rem" }}>Footer</p>
        </footer>
      </body>
    </html>
  );
}


//------------------------------- Layout -----------------------------------

// Layout is a UI that is shared between multiple pages in the app
// in route localhost:3000, the {children} refers to:         app -> page.tsx -> Home component
// in route localhost:3000/about, the {children} refers to:   app -> about -> page.tsx
// and ...



//------------------------------- Metadata -----------------------------------

// Both layout.tsx and page.tsx can export metadata. If defined in a layout
// it applies to the all pages in the layout; if defined in a page, it applies only to that page.
// for static metadata, see   --->   about/page.tsx
// for dynamic metadata, see  --->   products/[productId]/page.tsx

// title metadata: for "default" key   ---> see blog/page.tsx and navigate to route http://localhost:3000/blog
// title metadata: for "template" key  ---> see profile/page.tsx and navigate to route http://localhost:3000/profile
// title metadata: for "absolute" key  ---> see auth/login/page.tsx and navigate to route http://localhost:3000/login

//------------------------------- Active Link -----------------------------------

// see app/(auth)/layout.tsx -- check localhost:3000/register

//------------------------------- Navigating Programmatically -----------------------------------

// see app/order-product/page.tsx   (using useNavigation hook)

//------------------------------- template -----------------------------------

// layout keeps all the common elements. if you enter something (fx arash) in the register page, it will
// be shown in other children (login and forgot-password)
// if you need that some elements do'nt be shared with other children, you should use 'template' instead of 'layout'. 
// all we have to do is rename layout to template.
// example scenarios include: enter, exit, animations for Pages, running a side effect using the use effect 

//------------------------------- Loading -----------------------------------

// see app/blog/loading.tsx
// show loading, meanwhile a specific rout segment's content is loading.
// Nex.js allows the creation of shared layouts that remains interactive, while new route segments are loading.
// user can continue interacting with certain parts such as navbar, sidebar, while main content is still being fetched.

//------------------------------- Error -----------------------------------

// see app/products/[productId]/reviews/[reviewId]/error.tsx  and   app/products/[productId]/reviews/[reviewId]/page.tsx
// navigate this route a few times to see the error: localhost:3000/products/1/reviews/1
// Error file, wraps a route segment and its nested children, and creates error UI tailored to specific segments.
// it isolate errors to affected just that segment, while keeping the rest of the app functional.

//------------------------------- Recovering from Error --------------------------
// see app/products/[productId]/reviews/[reviewId]/error.tsx added 'reset' prop and a button for recovering from error
// an error bubble op to the closest parent error boundary
// an error.tsx file, will cater to errors for all its nested child segments, but the error boundary does not catch errors 
// com from layout, as layout sets above the error boundary. To solve this issue, we should place the error.tsx file in the 
// parent of of the layout. In this case we should move error.tsx file into 'product' folder.

//------------------------------- Parallel Routes -----------------------------------

// see app/complex-dashboard and its subfolders -- https://www.youtube.com/watch?v=8I5-OTNOni0&list=PLC3y8-rFHvwjOKd6gdf4QtV1uYNiQnruI&index=28
// parallel routes in Next.js are defined using a feature called 'slot'. we need to name the folder like '@folder'
// each slot is passed as a 'prop' to its corresponding layout.tsx file.
// independent rout handling: each slot, can have its own loading and error states, without effecting on other slots.

//------------------------------- Parallel Routes - unmatched routes -----------------------------------

// see app/complex-dashboard and its subfolders, focus on default.tsx files; see links below:
// https://www.youtube.com/watch?v=NPtnJ6Ivv9k&list=PLC3y8-rFHvwjOKd6gdf4QtV1uYNiQnruI&index=29
// https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs

//------------------------------- conditional routes -----------------------------------

// when a user logged in show the dashboard and when not logged in, show the login page.
// see app/complex-dashboard/@login and app/complex-dashboard/layout.tsx